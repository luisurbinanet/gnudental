//This class is incomplete and is mostly in preparation for version 2.0

using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

namespace Free_Dental{

	public class Tooth{

		public Tooth(){

		}

		public static bool IsAnterior(int intTooth){
			string toothNum=FromInt(intTooth);
			return IsAnterior(toothNum);
		}

		public static bool IsAnterior(string toothNum){
			int intTooth=ToInt(toothNum);
			if(intTooth==-1)
				return false;
			if(intTooth>=6 && intTooth<=11)
				return true;
			if(intTooth>=22 && intTooth<=27)
				return true;
			return false;
		}

		public static bool IsPosterior(int intTooth){
			string toothNum=FromInt(intTooth);
			return IsPosterior(toothNum);
		}

		public static bool IsPosterior(string toothNum){
			int intTooth=ToInt(toothNum);
			if(intTooth==-1)
				return false;
			if(intTooth>=1 && intTooth<=5)
				return true;
			if(intTooth>=12 && intTooth<=21)
				return true;
			if(intTooth>=28 && intTooth<=32)
				return true;
			return false;
		}

		public static bool IsPreMolar(int intTooth){
			string toothNum=FromInt(intTooth);
			return IsPreMolar(toothNum);
		}

		public static bool IsPreMolar(string toothNum){
			int intTooth=ToInt(toothNum);
			if(intTooth==-1)
				return false;
			if(intTooth==4 
				|| intTooth==5
				|| intTooth==12
				|| intTooth==13
				|| intTooth==20
				|| intTooth==21
				|| intTooth==28
				|| intTooth==29)
				return true;
			return false;
		}

		public static bool IsMolar(int intTooth){
			string toothNum=FromInt(intTooth);
			return IsMolar(toothNum);
		}

		public static bool IsMolar(string toothNum){
			int intTooth=ToInt(toothNum);
			if(intTooth==-1)
				return false;
			if(intTooth>=1 && intTooth<=3)
				return true;
			if(intTooth>=14 && intTooth<=19)
				return true;
			if(intTooth>=30 && intTooth<=32)
				return true;
			return false;
		}

		public static bool IsMaxillary(int intTooth){
			string toothNum=FromInt(intTooth);
			return IsMaxillary(toothNum);
		}

		public static bool IsMaxillary(string toothNum){
			int intTooth=ToInt(toothNum);
			if(intTooth==-1)
				return false;
			if(intTooth>=1 && intTooth<=16)
				return true;
			return false;
		}

		public static bool IsValid(string toothNum){
			//used every time user enters toothNum in procedure box.
			if(IsPrimary(toothNum)){
				return true;
			}
			int intTooth=ToInt(toothNum);
			if(intTooth==-1)
				return false;
			return true;
		}

		public static int ToInt(string toothNum){
			int retVal;
			try{
				retVal=Convert.ToInt32(toothNum);
			}
			catch{
				return -1;
			}
			if(retVal<1 || retVal>32)
				return -1;
			return retVal;
		}

		public static string FromInt(int intTooth){
			//don't need much error checking.
			string retStr="";
			retStr=intTooth.ToString();
			return retStr;
		}

		public static bool IsPrimary(string toothNum){
			if(toothNum.Length>1)
				return false;
			try{
				int intTooth=Convert.ToInt32(toothNum);
				return false;
			}
			catch{
				if(string.CompareOrdinal(toothNum,"A")>=0
					&& string.CompareOrdinal(toothNum,"T")<=0){
					return true;
				}
				else return false;
			}
		}

    public static string SurfTidy(string surf){
      string surfTidy="";
      ArrayList al=new ArrayList();
      for(int i=0;i<surf.Length;i++){
        al.Add(surf.Substring(i,1).ToUpper());
      }
      if(al.Contains((string)"M")){
        surfTidy+="M";
      } 
      if(al.Contains((string)"O")){
        surfTidy+="O";
      } 
      if(al.Contains((string)"I")){
        surfTidy+="I";
      } 
      if(al.Contains((string)"D")){
        surfTidy+="D";
      } 
      if(al.Contains((string)"B")){
        surfTidy+="B";
      } 
      if(al.Contains((string)"F")){
        surfTidy+="F";
      } 
      if(al.Contains((string)"L")){
        surfTidy+="L";
      }
      return surfTidy;      
    }

	}
}
